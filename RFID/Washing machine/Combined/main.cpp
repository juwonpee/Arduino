#include <Arduino.h>
#include "SPI.h"
#include "Adafruit_SSD1306.h"
#include "MFRC522.h"

const byte coinupStartBlock PROGMEM = 8;
const byte coinup[12][16] PROGMEM = {
    //block 8
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 

    //block 9    
    0x88, 0x91, 0x80, 0x00, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 10
    0x88, 0x02, 0x00, 0x05, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 11
    0x66, 0x77, 0x63, 0x6F,
    0x69, 0x6E, 0xFF, 0x07,
    0x80, 0x69, 0xFF, 0xFF,  
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 12
    0x88, 0x02, 0x00, 0x05, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 13
    0x88, 0x02, 0x00, 0x05, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 14
    0x88, 0x02, 0x00, 0x05, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 15
    0x66, 0x77, 0x63, 0x6F,
    0x69, 0x6E, 0xFF, 0x07,
    0x80, 0x69, 0x00, 0xFF,  
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 16
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00,

    //block 17
    0x88, 0x0B, 0x16, 0x21, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 18
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 

    //block 19
    0x66, 0x77, 0x63, 0x6F,
    0x69, 0x6E, 0xFF, 0x07,
    0x80, 0x69, 0xFF, 0xFF,  
    0xFF, 0xFF, 0xFF, 0xFF,
};

const byte unieluxStartBlock PROGMEM = 4;
const byte unielux[12][16] PROGMEM = {
    //block 4
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 

    //block 5
    0x88, 0x11, 0x22, 0x00, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 6
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 

    //block 7
    0x6B, 0x73, 0x63, 0x6F,
    0x69, 0x6E, 0xFF, 0x07,
    0x80, 0x69, 0xFF, 0xFF,  
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 8
    0x88, 0x02, 0x00, 0x00, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 9
    0x88, 0x02, 0x00, 0x00, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 10
    0x88, 0x02, 0x00, 0x00, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 11
    0x6B, 0x73, 0x63, 0x6F,
    0x69, 0x6E, 0xFF, 0x07,
    0x80, 0x69, 0x00, 0xFF,  
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 12
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 

    //block 13
    0x88, 0x0B, 0x16, 0x21, 
    0x00, 0x00, 0xFF, 0x07, 
    0x80, 0x69, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,

    //block 14
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 

    //block 15
    0x6B, 0x73, 0x63, 0x6F, //66 77 63 6f
    0x69, 0x6E, 0xFF, 0x07, //69 6e
    0x80, 0x69, 0xFF, 0xFF,  
    0xFF, 0xFF, 0xFF, 0xFF,
};
byte buffer[16];
#define rst 9
#define ss 10

// rfid init and set keys
MFRC522 rfid(rst, ss);
MFRC522::MIFARE_Key coinupKey1 = {0x66, 0x77, 0x63, 0x6F, 0x69, 0x6E};
MFRC522::MIFARE_Key defaultKey = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
MFRC522::MIFARE_Key unieluxKey1 = {0x6B, 0x73, 0x63, 0x6F, 0x69, 0x6E};

Adafruit_SSD1306 display(128, 64, &Wire, 01, 400000UL, 400000UL);

void writeCard(bool type) // 0:coinup 1:unielux
{
    display.clearDisplay();
    display.setCursor(0,0);
    display.println(F("Waiting card"));
    display.display();

    //check for new card and loop if not present
    while (! rfid.PICC_IsNewCardPresent())
    {
        display.clearDisplay();
        display.setCursor(0,0); 
        display.println(F("Tap card"));
        display.display();
        delay(50);
    }
    //select card
    rfid.PICC_ReadCardSerial();

    if (type == false)
    {
        for (int i = coinupStartBlock; i < (coinupStartBlock + 12); i = i + 4)
        {
            MFRC522::StatusCode status;
            //auth with keys
            status = rfid.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, i, &coinupKey1, &(rfid.uid));

            if (status != MFRC522::STATUS_OK)
            {
                display.clearDisplay();
                display.setCursor(0,0);
                display.println(F("Fail auth"));
                display.display();
                delay(2000);
                return;
            }
            //write blocks
            for (int j = 0; j < 4; j++)
            {
                display.clearDisplay();
                display.setCursor(0,0);
                display.println("Writing block: " + String(i + j));
                display.display();
                memcpy_P(buffer, coinup[i+j], 16);
                status = rfid.MIFARE_Write((i + j), buffer, 16);
                if (status != MFRC522::STATUS_OK)
                {
                    display.clearDisplay();
                    display.setCursor(0,0);
                    display.println(F("Fail Write"));
                    display.display();
                    return;
                }
            }
        }
    }

    // unielux write
    if (type == true)
    {
        for (int i = unieluxStartBlock; i < (unieluxStartBlock + 12); i = i + 4)
        {
            MFRC522::StatusCode status;
            //auth with keys
            status = rfid.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, i, &unieluxKey1, &(rfid.uid));

            if (status != MFRC522::STATUS_OK)
            {
                display.clearDisplay();
                display.setCursor(0,0);
                display.println(F("Fail auth"));
                display.display();
                delay(2000);
                return;
            }
            //write blocks
            for (int j = 0; j < 4; j++)
            {
                display.clearDisplay();
                display.setCursor(0,0);
                display.println("Writing block: " + String(i + j));
                display.display();
                memcpy_P(buffer, unielux[i+j], 16);
                status = rfid.MIFARE_Write((i + j), buffer, 16);
                if (status != MFRC522::STATUS_OK)
                {
                    display.clearDisplay();
                    display.setCursor(0,0);
                    display.println(F("Fail Write"));
                    display.display();
                    return;
                }
            }
        }
        display.clearDisplay();
        display.setCursor(0,0);
        display.println(F("Success"));
        display.display();

    }

    
}

void setup()
{
    //pinmode init
    pinMode(2, INPUT_PULLUP);
    pinMode(3, INPUT_PULLUP);

    //rfid init
    SPI.begin();
    rfid.PCD_Init();

    //display init
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.cp437(true);
    display.display();
	delay(3000);
}

void loop() {
  // put your main code here, to run repeatedly:
  display.clearDisplay();
  display.setCursor(0,0);
  display.println(F("Select profile"));
  display.println(F("1. coinup"));
  display.println(F("2. unielux"));
  display.display();
  bool but1 = !digitalRead(2);
  bool but2 = !digitalRead(3);
  if (but1 || but2)
  {
      display.println(F("button debouncing wait"));
      display.display();
      delay(1000);
      if (but1 == true)
      {
          writeCard(false);
      }
      if (but2 == true)
      {
          writeCard(true);
      }
  }
}